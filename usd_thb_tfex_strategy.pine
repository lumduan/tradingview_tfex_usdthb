// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © lumduan
//@version=6

// ————— Constants
float RISK_FREE_RATE = 2.2 // Risk-free rate for calculating Sharpe ratio
HIGH_PRICE_BAR_COLOR = color.green
LOW_PRICE_BAR_COLOR = color.red
int HIGH_PRICE_BAR_WIDTH = 1
int LOW_PRICE_BAR_WIDTH = 1

TABLE_HEADER_COLOR = color.new(color.black, 0)
TABLE_INDEX_COLOR = color.new(color.gray, 0)
TABLE_CELL_COLOR = color.new(color.black, 0)
TABLE_YEAR_CELL_POSITIVE_COLOR = color.new(color.green, 0)
TABLE_YEAR_CELL_NEGATIVE_COLOR = color.new(color.red, 0)



int CONTACT_PER_ORDER = 10 
float COMMISSION_PRICE = 9.0 //THB

// Inputs for configuring the pivot point calculation
int leftBars  = input(2) // Number of bars to the left for pivot calculation
int rightBars = input(1) // Number of bars to the right for pivot calculation

int prec      = input(2, title = "Return Precision") // Precision of return percentages
bool show_table = input.bool(defval = true, title = "On/Off") // Show or hide the table


strategy(title = "USDTHB TFEX Strategy",overlay = true, calc_on_every_tick = true, default_qty_type = strategy.fixed, default_qty_value = CONTACT_PER_ORDER, commission_type = strategy.commission.cash_per_contract, commission_value = COMMISSION_PRICE , risk_free_rate = RISK_FREE_RATE)



swingHigh = ta.pivothigh(leftBars,rightBars)
swingLow = ta.pivotlow(leftBars,rightBars)

// Initialize high and low price variables
float highPrice = 0.0
highPrice := not na(swingHigh) ? swingHigh : highPrice[1] // Update high price if a new swing high is detected, else carry forward previous value

float lowPrice = 0.0
lowPrice := not na(swingLow) ? swingLow : lowPrice[1] // Update low price if a new swing low is detected, else carry forward previous value

// Long Entry Logic
bool longEntry = false
longEntry := not na(swingHigh) ? true : (longEntry[1] and high > highPrice ? false : longEntry[1]) // Entry on swing high or invalidate if price exceeds current high

// Short Entry Logic
bool shortEntry = false
shortEntry := not na(swingLow) ? true : (shortEntry[1] and low < lowPrice ? false : shortEntry[1]) // Entry on swing low or invalidate if price drops below current low

// Place Long Entry Order
if (longEntry)
    strategy.entry(id="Long", direction=strategy.long, comment="Long", stop=highPrice + syminfo.mintick)

// Place Short Entry Order
if (shortEntry)
    strategy.entry("Short", strategy.short, comment="Short", stop=lowPrice - syminfo.mintick)

// Plot high and low prices on the chart
plot(highPrice, color = HIGH_PRICE_BAR_COLOR, linewidth = HIGH_PRICE_BAR_WIDTH)
plot(lowPrice, color = LOW_PRICE_BAR_COLOR,   linewidth = LOW_PRICE_BAR_WIDTH)


// ======= TABLE ====================================================================================================

// Detect new month and new year
bool newMonth = month(time) != month(time[1]) // True if the current bar is in a new month
bool newYear  = year(time)  != year(time[1])  // True if the current bar is in a new year

// Retrieve current equity and calculate bar profit/loss %
float equity = strategy.equity
float barProfitLoss = equity / equity[1] - 1 // Calculate the profit or loss for the current bar as a percentage change from the previous bar's equity

// Initialize variables for current month and year P&L %
float currentMonthPnL = 0.0
float currentYearPnL  = 0.0

// Calculate current monthly P&L %
currentMonthPnL := newMonth ? 0.0 : (1 + currentMonthPnL[1]) * (1 + barProfitLoss) - 1

// Calculate current yearly P&L %
currentYearPnL := newYear ? 0.0 : (1 + currentYearPnL[1]) * (1 + barProfitLoss) - 1

// Arrays to store Monthly and Yearly P&Ls
var float[] monthlyPnLs = array.new_float(0) // Array to store monthly P&L values
var int[] monthlyPnLsCount = array.new_int(0) // Array to store timestamps for monthly P&L

var float[] yearlyPnLs = array.new_float(0) // Array to store yearly P&L values
var int[] yearlyPnLsCount = array.new_int(0) // Array to store timestamps for yearly P&L

// Track whether P&L computation was performed
bool pnlComputed = false

// Store monthly P&L% when a new month starts or on the last bar
if (not na(currentMonthPnL[1]) and (newMonth or barstate.islast))
    if (pnlComputed[1])
        array.pop(monthlyPnLs) // Remove last value if already computed
        array.pop(monthlyPnLsCount)
    
    array.push(monthlyPnLs, currentMonthPnL[1]) // Add current month P&L
    array.push(monthlyPnLsCount, time[1]) // Add corresponding timestamp

// Store yearly P&L when a new year starts or on the last bar
if (not na(currentYearPnL[1]) and (newYear or barstate.islast))
    if (pnlComputed[1])
        array.pop(yearlyPnLs) // Remove last value if already computed
        array.pop(yearlyPnLsCount)
    
    array.push(yearlyPnLs, currentYearPnL[1]) // Add current year P&L
    array.push(yearlyPnLsCount, time[1]) // Add corresponding timestamp

// Calculate current yearly P&L as the sum of monthly P&Ls
// if (newYear)
//     currentYearPnL := 0.0 // Reset yearly P&L at the start of a new year
//     for i = 0 to array.size(monthlyPnLs) - 1
//         currentYearPnL := currentYearPnL + array.get(monthlyPnLs, i)
// else
//     currentYearPnL := currentYearPnL + barProfitLoss

// Set to true on the last bar to indicate that P&L computation has been performed
pnlComputed := barstate.islast ? true : (pnlComputed[1] ? pnlComputed[1] : false)

// Monthly P&L table
var table monthlyPnLTable = table(na)

if show_table

    if (barstate.islast)
        monthlyPnLTable := table.new(position = position.bottom_right, columns = 14, rows = array.size(yearlyPnLs) +1, border_width = 1)
        table.cell(monthlyPnLTable, 0,  0, "Y|M",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 1,  0, "Jan",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 2,  0, "Feb",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 3,  0, "Mar",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 4,  0, "Apr",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 5,  0, "May",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 6,  0, "Jun",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 7,  0, "Jul",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 8,  0, "Aug",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 9,  0, "Sep",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 10, 0, "Oct",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 11, 0, "Nov",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 12, 0, "Dec",  text_color = color.white, bgcolor = TABLE_HEADER_COLOR)
        table.cell(monthlyPnLTable, 13, 0, "Year", text_color = color.white, bgcolor = TABLE_HEADER_COLOR)

        // Create a row for each year
        for yearIndex = 0 to array.size(yearlyPnLs) - 1
            // Create year index cell
            table.cell(monthlyPnLTable, 0, yearIndex + 1, str.tostring(year(array.get(yearlyPnLsCount, yearIndex))), text_color = color.white, bgcolor = TABLE_CELL_COLOR)

            // Create Year  P&L cells
            yearColor = array.get(yearlyPnLs, yearIndex) > 0 ? TABLE_YEAR_CELL_POSITIVE_COLOR : TABLE_YEAR_CELL_NEGATIVE_COLOR
            table.cell(monthlyPnLTable, 13, yearIndex + 1, str.tostring(math.round(number = array.get(yearlyPnLs,yearIndex)*100, precision = prec)) + " %", text_color = color.white, bgcolor = yearColor)
        
        // Create a row and col for each month
        for monthIndex = 0 to array.size(monthlyPnLs) - 1
            monthRow = year(array.get(monthlyPnLsCount, monthIndex)) - year(array.get(yearlyPnLsCount, 0)) + 1
            monthColumn = month(array.get(monthlyPnLsCount, monthIndex))
            monthColor = array.get(monthlyPnLs, monthIndex) > 0 ? TABLE_YEAR_CELL_POSITIVE_COLOR : TABLE_YEAR_CELL_NEGATIVE_COLOR
            table.cell(monthlyPnLTable, monthColumn, monthRow, str.tostring(math.round(number = array.get(monthlyPnLs, monthIndex)*100, precision = prec)) + " %", text_color = color.white, bgcolor = monthColor)
